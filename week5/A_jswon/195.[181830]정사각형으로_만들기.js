/**
 * 문제 설명
 * 이차원 정수 배열 arr이 매개변수로 주어집니다. 
 * arr의 행의 수가 더 많다면 열의 수가 행의 수와 같아지도록 
 * 각 행의 끝에 0을 추가하고, 
 * 열의 수가 더 많다면 행의 수가 열의 수와 같아지도록 
 * 각 열의 끝에 0을 추가한 이차원 배열을 
 * return 하는 solution 함수를 작성해 주세요.
 * 
 * 제한사항
 * 1 ≤ arr의 길이 ≤ 100
 * 1 ≤ arr의 원소의 길이 ≤ 100
 * arr의 모든 원소의 길이는 같습니다.
 * 1 ≤ arr의 원소의 원소 ≤ 1,000
 * 
 * 입출력 예
 * arr	                                                                result
 * [[572, 22, 37], [287, 726, 384], [85, 137, 292], [487, 13, 876]]	    [[572, 22, 37, 0], [287, 726, 384, 0], [85, 137, 292, 0], [487, 13, 876, 0]]
 * [[57, 192, 534, 2], [9, 345, 192, 999]]	                            [[57, 192, 534, 2], [9, 345, 192, 999], [0, 0, 0, 0], [0, 0, 0, 0]]
 * [[1, 2], [3, 4]]	                                                    [[1, 2], [3, 4]]
 * 
 * 
 * @param {Array} arr 이차원 정수 배열
 * @returns 이차원 배열에 0을 추가하여 정사각형 형태의 배열
 */
function solution(arr) {
    // 01. 행,열의 길이를 각각 구하여 할당한다.
    let row = arr.length;
    let col = arr[0].length;
    // 02. 몇 번을 0을 채워야 할지에 대한 변수를 선언한다.
    let count = 0;
    // 03. 행과 열의 길이가 각각 같다면 배열을 그대로 반환한다.
    if(arr.length === arr[0].length) return arr;
    // 04. 행의 길이가 열의 길이보다 크다면 열 부분에 0을 채워야 한다.
    else if (row > col) {
        // 04-1. 얼만큼 채울 것인지 값을 구한다.
        count = row - col;
        // 04-2. for loop를 수행한다.
        for(let i=0; i<count; i++){
            // 04-3. forEach loop를 수행하여 해당 배열의 끝에 0을 추가한다.
            arr.forEach(x => {
                x.push(0)
            })
        }
    }
    // 05. 열의 길이가 행의 길이보다 크다면 행 부분에 0을 채워야 한다.
    else {
        // 05-1. 몇 번을 채울 것인지 값을 구한다.
        count = col - row;
        // 05-2. for loop를 수행한다.
        for(let i=0; i<count; i++) {
            // 05-3. col의 값만큼 배열을 선언하여 0으로 채운 후, 배열에 추가한다.
            arr.push(Array(col).fill(0));
        }
    }
    // 06. 반환한다.
    return arr;
}